name: 'Claude Iterative Review Handler'

on:
  pull_request:
    types: [opened]
  issue_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to process reviews'
        required: true
        type: string
      max_iterations:
        description: 'Maximum review iterations'
        required: false
        default: '5'
        type: string

jobs:
  process-reviews:
    name: 'Process PR Reviews with Claude'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
    
    # Only run on claude-auto branches or when manually triggered
    if: |
      (github.event.pull_request && startsWith(github.event.pull_request.head.ref, 'claude-auto/')) ||
      (github.event.issue && github.event.issue.pull_request) ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 'Setup Environment'
        run: |
          echo "## Claude Review Handler Started" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ¤– Processing PR reviews and comments..." >> $GITHUB_STEP_SUMMARY

      - name: 'Get PR Details'
        id: pr_details
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let prNumber;
            
            if (context.payload.pull_request) {
              prNumber = context.payload.pull_request.number;
            } else if (context.payload.issue?.pull_request) {
              prNumber = context.payload.issue.number;
            } else if ('${{ inputs.pr_number }}') {
              prNumber = parseInt('${{ inputs.pr_number }}');
            }
            
            if (!prNumber) {
              core.setFailed('No PR number found');
              return;
            }
            
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            core.setOutput('number', pr.number);
            core.setOutput('branch', pr.head.ref);
            core.setOutput('base_branch', pr.base.ref);
            
            return pr;

      - name: 'Checkout PR Branch'
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr_details.outputs.branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: 'Install Dependencies'
        run: |
          # Install project dependencies
          npm ci
          
          # Install MCP server dependencies
          npm install -g @anthropic/claude-code-cli@latest
          npm install -g @upstash/context7-mcp @playwright/mcp
          
          # Install GitHub MCP server
          npm install -g @modelcontextprotocol/server-github
          
          # Install Python for Serena MCP
          python3 -m pip install --user uv
          export PATH="$HOME/.local/bin:$PATH"
          
          echo "âœ… Dependencies installed" >> $GITHUB_STEP_SUMMARY

      - name: 'Setup MCP Configuration with GitHub'
        run: |
          # Create MCP configuration including GitHub server
          cat > .mcp-review.json << EOF
          {
            "mcpServers": {
              "github": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-github"],
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                }
              },
              "context7": {
                "command": "npx",
                "args": ["-y", "@upstash/context7-mcp"],
                "env": {}
              },
              "serena": {
                "command": "${HOME}/.local/bin/uvx",
                "args": [
                  "--from",
                  "git+https://github.com/oraios/serena",
                  "serena",
                  "start-mcp-server",
                  "--context",
                  "ide-assistant",
                  "--project",
                  "${{ github.workspace }}"
                ],
                "env": {}
              },
              "playwright": {
                "command": "npx",
                "args": ["-y", "@playwright/mcp"],
                "env": {}
              }
            }
          }
          EOF
          
          echo "âœ… MCP servers configured with GitHub integration" >> $GITHUB_STEP_SUMMARY

      - name: 'Iterative Review Processing'
        id: review_loop
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          MAX_ITERATIONS: ${{ inputs.max_iterations || '5' }}
        run: |
          ITERATION=0
          PR_NUMBER="${{ steps.pr_details.outputs.number }}"
          CHANGES_MADE=false
          
          while [ $ITERATION -lt $MAX_ITERATIONS ]; do
            ITERATION=$((ITERATION + 1))
            echo "### Iteration $ITERATION" >> $GITHUB_STEP_SUMMARY
            
            # Wait a bit for CodeRabbit and other bots to post their reviews
            if [ $ITERATION -eq 1 ]; then
              echo "Waiting 30 seconds for automated reviews to complete..." >> $GITHUB_STEP_SUMMARY
              sleep 30
            fi
            
            # Create prompt for Claude to process reviews
            cat > review-prompt-$ITERATION.md << 'PROMPT_EOF'
          # PR Review Processing Task
          
          ## PR #${{ steps.pr_details.outputs.number }}
          
          You have access to the GitHub MCP server. Please:
          
          1. **Fetch and analyze all PR comments and reviews**:
             - Use the GitHub MCP server to get all comments on PR #${{ steps.pr_details.outputs.number }}
             - This includes CodeRabbit AI reviews, Copilot suggestions, and human feedback
             - Pay special attention to:
               * CodeRabbit's automated analysis and suggestions
               * Any specific code changes requested
               * Security or performance concerns raised
               * Style and convention issues
          
          2. **Categorize the feedback**:
             - Critical issues that must be fixed
             - Suggestions that would improve the code
             - Questions that need clarification
             - False positives or issues you disagree with (explain why)
          
          3. **Implement necessary fixes**:
             - Use Serena MCP to make precise code modifications
             - Address each valid concern raised in the reviews
             - Follow the project's coding standards
             - Ensure changes don't break existing functionality
          
          4. **Document your changes**:
             - Create a summary of what you fixed and why
             - Note any feedback you chose not to implement and explain your reasoning
          
          ## Available MCP Servers:
          
          - **GitHub**: Read PR comments, reviews, and issue details
          - **Serena**: Make precise code modifications using symbolic operations
          - **Context7**: Get latest documentation for libraries
          - **Playwright**: Test UI changes if needed
          
          ## Important:
          - Only make changes that address review feedback
          - If there are no actionable comments, report "NO_CHANGES_NEEDED"
          - Be conservative - only fix clear issues, don't make unnecessary changes
          - After making changes, verify they compile and pass basic checks
          
          PROMPT_EOF
            
            # Execute Claude with review processing
            LOG_FILE="review-iteration-$ITERATION.log"
            
            claude code \
              --model claude-3-5-sonnet-20241022 \
              --mcp \
              --mcp-config .mcp-review.json \
              --max-tokens 8192 \
              --temperature 0.2 \
              --prompt "$(cat review-prompt-$ITERATION.md)" \
              --output "$LOG_FILE" 2>&1
            
            # Check if changes were made
            if git diff --quiet; then
              echo "No changes made in iteration $ITERATION" >> $GITHUB_STEP_SUMMARY
              
              # Check if Claude indicated no changes needed
              if grep -q "NO_CHANGES_NEEDED" "$LOG_FILE"; then
                echo "âœ… All review feedback has been addressed or no actionable items found" >> $GITHUB_STEP_SUMMARY
                break
              fi
            else
              CHANGES_MADE=true
              echo "Changes detected, committing..." >> $GITHUB_STEP_SUMMARY
              
              # Commit the changes
              git config --local user.email "claude-automation[bot]@users.noreply.github.com"
              git config --local user.name "Claude Automation Bot"
              
              git add -A
              
              # Exclude ephemeral files
              git reset HEAD .mcp-review.json || true
              git reset HEAD "review-prompt-*.md" || true
              git reset HEAD "review-iteration-*.log" || true
              
              if [ -n "$(git diff --cached --name-only)" ]; then
                # Create commit message with iteration context
                git commit -m "fix: address review feedback (iteration $ITERATION)

Automated fixes based on PR review comments:
- Processed CodeRabbit AI suggestions
- Addressed reviewer feedback
- Fixed identified issues

Iteration: $ITERATION of $MAX_ITERATIONS
PR: #$PR_NUMBER

ðŸ¤– Generated with Claude Code
Co-Authored-By: Claude <noreply@anthropic.com>"
                
                # Push changes
                git push origin "${{ steps.pr_details.outputs.branch }}"
                
                echo "âœ… Changes pushed for iteration $ITERATION" >> $GITHUB_STEP_SUMMARY
                
                # Wait for new reviews on the changes
                echo "Waiting 60 seconds for new reviews..." >> $GITHUB_STEP_SUMMARY
                sleep 60
              else
                echo "No real changes to commit after filtering ephemeral files" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          
          if [ "$CHANGES_MADE" = true ]; then
            echo "review_complete=true" >> $GITHUB_OUTPUT
          else
            echo "review_complete=false" >> $GITHUB_OUTPUT
          fi
          
          echo "## Review Processing Complete" >> $GITHUB_STEP_SUMMARY
          echo "Completed $ITERATION iteration(s)" >> $GITHUB_STEP_SUMMARY

      - name: 'Post Summary Comment'
        if: steps.review_loop.outputs.review_complete == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = `## ðŸ¤– Claude Review Handler Summary
            
            I've processed the review feedback and made the necessary changes.
            
            ### What I did:
            - Analyzed all PR comments including CodeRabbit AI reviews
            - Implemented fixes for valid concerns
            - Pushed updates to address the feedback
            
            ### Review Status:
            âœ… Review feedback has been addressed
            
            Please review the changes and let me know if any additional adjustments are needed.
            
            ---
            *Automated by Claude Code Review Handler*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr_details.outputs.number }},
              body: summary
            });

  # Optional: Auto-merge if all checks pass
  auto-merge:
    name: 'Auto-merge if approved'
    runs-on: ubuntu-latest
    needs: process-reviews
    if: success()
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: 'Check merge conditions'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // This is optional - only merge if explicitly approved
            // You can add logic here to auto-merge after successful review processing
            console.log('Auto-merge check - implement based on your requirements');