name: 'Claude Review Processor (Privileged)'

on:
  workflow_run:
    workflows: ["Claude Review Receiver (Unprivileged)"]
    types:
      - completed
  issue_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to process (must be from trusted source)'
        required: true
        type: string
      force_trusted:
        description: 'Force process as trusted (use with caution)'
        required: false
        default: false
        type: boolean

jobs:
  process-reviews:
    name: 'Process PR Reviews Safely'
    runs-on: ubuntu-latest
    # This has privileged access but doesn't checkout untrusted code
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
    
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request) ||
      github.event_name == 'pull_request_review' ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 'Download and Verify Artifacts'
        if: github.event_name == 'workflow_run'
        uses: actions/github-script@v7
        id: download_artifacts
        with:
          script: |
            // Download artifacts from the unprivileged workflow
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            });
            
            const prArtifact = artifacts.data.artifacts.find(a => a.name.startsWith('pr-'));
            if (!prArtifact) {
              core.setFailed('No PR artifacts found');
              return;
            }
            
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: prArtifact.id,
              archive_format: 'zip'
            });
            
            const fs = require('fs');
            fs.writeFileSync('pr-artifacts.zip', Buffer.from(download.data));
            
            // Extract PR number from artifact name
            const prNumber = prArtifact.name.match(/pr-(\d+)-artifacts/)[1];
            core.setOutput('pr_number', prNumber);
            
            return prNumber;

      - name: 'Extract and Validate Artifacts'
        if: github.event_name == 'workflow_run'
        id: extract_metadata
        run: |
          # Create secure temporary directory for artifact extraction
          ARTIFACT_DIR="${{ runner.temp }}/artifacts"
          mkdir -p "$ARTIFACT_DIR"
          
          # Extract artifacts into secure temporary directory
          unzip -d "$ARTIFACT_DIR" pr-artifacts.zip
          
          # Verify checksums in the secure directory
          cd "$ARTIFACT_DIR"
          if ! sha256sum -c checksums.txt; then
            echo "::error::Artifact checksum verification failed!"
            exit 1
          fi
          
          # Read metadata (sanitized) from secure directory
          PR_NUMBER=$(grep "^pr_number=" pr_metadata.txt | cut -d= -f2 | grep -E '^[0-9]+$')
          PR_BRANCH=$(grep "^pr_branch=" pr_metadata.txt | cut -d= -f2 | tr -cd '[:alnum:]/_-')
          PR_TRUSTED=$(grep "^trusted=" pr_metadata.txt | cut -d= -f2)
          
          # Validate PR number is numeric
          if ! [[ "$PR_NUMBER" =~ ^[0-9]+$ ]]; then
            echo "::error::Invalid PR number"
            exit 1
          fi
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          echo "trusted=$PR_TRUSTED" >> $GITHUB_OUTPUT

      - name: 'Determine PR Details'
        id: pr_details
        uses: actions/github-script@v7
        with:
          script: |
            let prNumber;
            
            if (context.eventName === 'workflow_run') {
              prNumber = '${{ steps.extract_metadata.outputs.pr_number }}';
            } else if (context.payload.issue?.pull_request) {
              prNumber = context.payload.issue.number;
            } else if (context.payload.pull_request) {
              prNumber = context.payload.pull_request.number;
            } else if ('${{ inputs.pr_number }}') {
              prNumber = '${{ inputs.pr_number }}';
            }
            
            if (!prNumber || !prNumber.match(/^\d+$/)) {
              core.setFailed('Invalid or missing PR number');
              return;
            }
            
            // Get PR details from API (safe operation)
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });
            
            // Check if PR is from a trusted source
            const trustedAuthors = ['bstewart2255', 'dependabot[bot]', 'claude-automation[bot]'];
            const isTrusted = trustedAuthors.includes(pr.user.login) || 
                             pr.head.ref.startsWith('claude-auto/') ||
                             '${{ inputs.force_trusted }}' === 'true';
            
            if (!isTrusted && pr.head.repo.full_name !== pr.base.repo.full_name) {
              core.warning('PR is from an untrusted fork. Manual review required.');
              // Add comment and exit
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '⚠️ This PR is from an untrusted source. Manual review required before automated processing.'
              });
              core.setOutput('skip_processing', 'true');
              return;
            }
            
            core.setOutput('pr_number', pr.number);
            core.setOutput('pr_branch', pr.head.ref);
            core.setOutput('pr_base', pr.base.ref);
            core.setOutput('is_trusted', isTrusted.toString());
            core.setOutput('skip_processing', 'false');

      - name: 'Skip if Untrusted'
        if: steps.pr_details.outputs.skip_processing == 'true'
        run: |
          echo "Skipping processing for untrusted PR"
          exit 0

      - name: 'Checkout Base Branch (Safe)'
        if: steps.pr_details.outputs.skip_processing != 'true'
        uses: actions/checkout@v4
        with:
          # Checkout base branch, not the PR branch
          ref: ${{ steps.pr_details.outputs.pr_base }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Setup Safe Environment'
        if: steps.pr_details.outputs.skip_processing != 'true'
        run: |
          # Create a safe branch for processing
          SAFE_BRANCH="claude-review-process-${{ steps.pr_details.outputs.pr_number }}"
          git checkout -b "$SAFE_BRANCH"
          
          # Cherry-pick specific commits if trusted
          if [ "${{ steps.pr_details.outputs.is_trusted }}" == "true" ]; then
            echo "Processing trusted PR changes"
            # Fetch the PR branch
            git fetch origin "${{ steps.pr_details.outputs.pr_branch }}"
            # Merge changes (but don't execute any code)
            git merge --no-commit --no-ff "origin/${{ steps.pr_details.outputs.pr_branch }}" || true
          else
            echo "Processing untrusted PR - no code checkout"
          fi

      - name: 'Install Dependencies'
        if: steps.pr_details.outputs.skip_processing != 'true'
        run: |
          # Install MCP servers and Claude CLI
          npm install -g @anthropic/claude-code-cli@latest
          npm install -g @missionsquad/mcp-github
          npm install -g @upstash/context7-mcp
          
          echo "✅ Dependencies installed" >> $GITHUB_STEP_SUMMARY

      - name: 'Setup MCP Configuration'
        if: steps.pr_details.outputs.skip_processing != 'true'
        run: |
          cat > .mcp-safe.json << EOF
          {
            "mcpServers": {
              "github": {
                "command": "npx",
                "args": ["@missionsquad/mcp-github"],
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                }
              },
              "context7": {
                "command": "npx",
                "args": ["-y", "@upstash/context7-mcp"],
                "env": {}
              }
            }
          }
          EOF

      - name: 'Process Reviews with Claude'
        if: steps.pr_details.outputs.skip_processing != 'true'
        id: process_reviews
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          PR_NUMBER="${{ steps.pr_details.outputs.pr_number }}"
          
          # Create review processing prompt
          cat > review-prompt.md << 'EOF'
          # Safe PR Review Processing
          
          You are processing PR #${{ steps.pr_details.outputs.pr_number }} reviews.
          
          IMPORTANT SECURITY CONSTRAINTS:
          - You are in a safe environment without access to the actual PR code
          - You can ONLY read PR comments and metadata via GitHub MCP
          - You cannot execute any code from the PR
          - You can only provide review feedback and suggestions
          
          Using the GitHub MCP server, please:
          1. Read all comments on PR #${{ steps.pr_details.outputs.pr_number }}
          2. Identify CodeRabbit AI feedback and other review comments
          3. Categorize issues found (security, performance, style, etc.)
          4. Generate a summary report of required fixes
          
          DO NOT attempt to:
          - Checkout or modify PR code
          - Execute any commands from the PR
          - Access files from the PR directly
          
          Output a structured report of the review feedback.
          EOF
          
          # Run Claude in safe mode
          claude code \
            --model claude-3-5-sonnet-20241022 \
            --mcp \
            --mcp-config .mcp-safe.json \
            --max-tokens 4096 \
            --temperature 0.2 \
            --prompt "$(cat review-prompt.md)" \
            --output review-analysis.md 2>&1 || true
          
          echo "review_complete=true" >> $GITHUB_OUTPUT

      - name: 'Post Review Summary'
        if: steps.pr_details.outputs.skip_processing != 'true' && steps.process_reviews.outputs.review_complete == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let reviewSummary = '## 🔍 Automated Review Analysis\n\n';
            
            try {
              const analysis = fs.readFileSync('review-analysis.md', 'utf8');
              reviewSummary += analysis;
            } catch (err) {
              reviewSummary += 'Review analysis completed but no specific issues found.';
            }
            
            reviewSummary += '\n\n---\n*This analysis was performed in a secure environment without executing PR code.*';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr_details.outputs.pr_number }},
              body: reviewSummary
            });

      - name: 'Add Safe Label'
        if: steps.pr_details.outputs.is_trusted == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Add label to indicate safe review completed
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr_details.outputs.pr_number }},
              labels: ['review-processed', 'safe-to-test']
            });